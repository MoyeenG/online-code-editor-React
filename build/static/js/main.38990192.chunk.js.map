{"version":3,"sources":["components/Editor.js","hooks/UseLocalStorage.js","components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","onClick","prevOpen","type","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","lineNumbers","theme","autoCloseBrackets","matchBrackets","highlightNonMatching","autoCloseTags","fullScreen","UseLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","javascript","setJavascript","srcDoc","setSrcDoc","isEnter","setIsEnter","timeout","setTimeout","clearTimeout","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RA8DeA,MA5Cf,SAAgBC,GAAQ,IACZC,EAA2CD,EAA3CC,SAAUC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SADnB,EAGKC,oBAAS,GAHd,mBAGZC,EAHY,KAGNC,EAHM,KASnB,OACI,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACI,sBAAKE,UAAU,eAAf,UACKN,EACD,wBACIO,QAAS,kBAAMF,GAAQ,SAACG,GAAD,OAAeA,MACtCC,KAAK,SACLH,UAAU,sBAHd,SAKI,cAAC,IAAD,CACII,KAAMN,EAAOO,IAAgBC,WAIzC,cAAC,aAAD,CACIC,eAnBZ,SAAsBC,EAAQC,EAAMd,GAChCC,EAASD,IAmBDA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACLC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,aAAa,EACbC,MAAO,iBACPC,mBAAmB,EACnBC,eAAe,EACfC,sBAAsB,EACtBC,eAAe,EACfC,YAAY,SC7BjBC,MAtBf,SAAyBC,EAAKC,GAC1B,IAAMC,EAHK,iBAGkBF,EADW,EAGdzB,oBAAS,WAC/B,IAAM4B,EAAYC,aAAaC,QAAQH,GAEvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACAA,IAEAA,KAXyB,mBAGjC5B,EAHiC,KAG1BmC,EAH0B,KAmBxC,OAJAC,qBAAU,WACNL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUtC,MAClD,CAACA,EAAO6B,IAEJ,CAAC7B,EAAOmC,I,iBCuEJI,MAzFf,WAAgB,IAAD,EACWb,EAAgB,OAAQ,IADnC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAO,IAFhC,mBAENgB,EAFM,KAEDC,EAFC,OAGuBjB,EAAgB,aAAc,IAHrD,mBAGNkB,EAHM,KAGMC,EAHN,OAIe3C,mBAAS,IAJxB,mBAIN4C,EAJM,KAIEC,EAJF,OAKiB7C,oBAAS,GAL1B,mBAKN8C,EALM,KAKGC,EALH,KAqBb,OAdAb,qBAAU,WACR,IAAMc,EAAUC,YAAW,WACzBJ,EAAU,qCAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,0CAOR,KAEH,OAAO,kBAAMQ,aAAaF,MACzB,CAACV,EAAME,EAAKE,IAGb,qCACE,sBAAKvC,UAAU,QAAf,UACE,qBACEgD,MAAM,6BACNC,KAAK,OACLC,QAAQ,YACRC,OAAO,eAJT,SAME,sBACEC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,wDAGN,gIAKF,sBAAKvD,UAAU,OAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CACEP,SAAS,MACTC,YAAY,OACZC,MAAOwC,EACPvC,SAAUwC,IAEZ,cAAC,EAAD,CACE3C,SAAS,MACTC,YAAY,MACZC,MAAO0C,EACPzC,SAAU0C,IAEZ,cAAC,EAAD,CACE7C,SAAS,aACTC,YAAY,KACZC,MAAO4C,EACP3C,SAAU4C,OAGd,wBACEvC,QAAS,WACP2C,GAAW,IAEb5C,UAAU,qBAJZ,2BAQA,qBAAKA,UAAU,OAAf,SACE,cAAC,IAAD,CAAY2C,QAASA,EAAS/C,SAAUgD,EAAxC,SACE,wBACEH,OAAQA,EACRe,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,OACP5D,UAAU,oCChFxB6D,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.38990192.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material-ocean.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\n\r\n// CodeMirror Add-ons\r\nimport 'codemirror/addon/edit/closebrackets'\r\nimport 'codemirror/addon/edit/matchbrackets'\r\nimport 'codemirror/addon/edit/closetag'\r\nimport 'codemirror/addon/display/fullscreen'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\n\r\n// Expand-Compress buttons\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nfunction Editor(props) {\r\n    const { language, displayName, value, onChange } = props\r\n\r\n    const [open, setOpen] = useState(true)\r\n\r\n    function handleChange(editor, data, value) {\r\n        onChange(value)\r\n    }\r\n\r\n    return (\r\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n            <div className=\"editor-title\">\r\n                {displayName}\r\n                <button\r\n                    onClick={() => setOpen((prevOpen) => !prevOpen)}\r\n                    type=\"button\"\r\n                    className=\"expand-collapse-btn\"\r\n                >\r\n                    <FontAwesomeIcon\r\n                        icon={open ? faCompressAlt : faExpandAlt}\r\n                    />\r\n                </button>\r\n            </div>\r\n            <ControlledEditor\r\n                onBeforeChange={handleChange}\r\n                value={value}\r\n                className=\"code-mirror-wrapper\"\r\n                options={{\r\n                    lineWrapping: true,\r\n                    lint: true,\r\n                    mode: language,\r\n                    lineNumbers: true,\r\n                    theme: 'material-ocean',\r\n                    autoCloseBrackets: true,\r\n                    matchBrackets: true,\r\n                    highlightNonMatching: true,\r\n                    autoCloseTags: true,\r\n                    fullScreen: true, \r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Editor\r\n","import { useState, useEffect } from 'react'\r\n\r\nconst PREFIX = 'codepen-clone-'\r\n\r\nfunction UseLocalStorage(key, initialValue) {\r\n    const prefixedKey = PREFIX + key\r\n\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n\r\n        if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n        if (typeof initialValue === 'function') {\r\n            return initialValue()\r\n        } else {\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [value, prefixedKey])\r\n\r\n    return [value, setValue]\r\n}\r\n\r\nexport default UseLocalStorage\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport UseLocalStorage from \"../hooks/UseLocalStorage\";\r\nimport Fullscreen from \"fullscreen-react\";\r\n\r\nfunction App() {\r\n  const [html, setHtml] = UseLocalStorage(\"html\", \"\");\r\n  const [css, setCss] = UseLocalStorage(\"css\", \"\");\r\n  const [javascript, setJavascript] = UseLocalStorage(\"javascript\", \"\");\r\n  const [srcDoc, setSrcDoc] = useState(\"\");\r\n  const [isEnter, setIsEnter] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const timeout = setTimeout(() => {\r\n      setSrcDoc(`\r\n        <html>\r\n          <body>${html}</body>\r\n          <style>${css}</style>\r\n          <script>${javascript}</script>\r\n        </html>\r\n      `);\r\n    }, 250);\r\n\r\n    return () => clearTimeout(timeout);\r\n  }, [html, css, javascript]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"error\">\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n          />\r\n        </svg>\r\n        <h1>\r\n          Sorry, but your screen size is too small. Try switching to a screen\r\n          with larger screen size\r\n        </h1>\r\n      </div>\r\n      <div className=\"norm\">\r\n        <div className=\"pane top-pane\">\r\n          <Editor\r\n            language=\"xml\"\r\n            displayName=\"HTML\"\r\n            value={html}\r\n            onChange={setHtml}\r\n          />\r\n          <Editor\r\n            language=\"css\"\r\n            displayName=\"CSS\"\r\n            value={css}\r\n            onChange={setCss}\r\n          />\r\n          <Editor\r\n            language=\"javascript\"\r\n            displayName=\"Js\"\r\n            value={javascript}\r\n            onChange={setJavascript}\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={() => {\r\n            setIsEnter(true);\r\n          }}\r\n          className=\"fullscreen-toggler\"\r\n        >\r\n          Go Fullscreen\r\n        </button>\r\n        <div className=\"pane\">\r\n          <Fullscreen isEnter={isEnter} onChange={setIsEnter}>\r\n            <iframe\r\n              srcDoc={srcDoc}\r\n              title=\"output\"\r\n              sandbox=\"allow-scripts\"\r\n              frameBorder=\"0\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              className=\"full-screenable-node\"\r\n            />\r\n          </Fullscreen>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}